name: release-preview

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
      - labeled

jobs:
  preview:
    if: (
      github.event.pull_request.base.ref == 'main') && (
      contains(join(github.event.pull_request.labels.*.name, ','), 'release-type/patch') ||
      contains(join(github.event.pull_request.labels.*.name, ','), 'release-type/minor') ||
      contains(join(github.event.pull_request.labels.*.name, ','), 'release-type/major')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set release type
        id: set_release_type
        run: |
          if echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q 'release-type/major'; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q 'release-type/minor'; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q 'release-type/patch'; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "No release-type label found."
            exit 1
          fi

      - name: Calculate next version
        id: calculate_version
        run: |
          CURRENT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          RELEASE_TYPE="${{ steps.set_release_type.outputs.type }}"
          echo "Release type: $RELEASE_TYPE"

          if [ "$RELEASE_TYPE" = "major" ]; then
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
          elif [ "$RELEASE_TYPE" = "minor" ]; then
            MINOR=$((MINOR+1))
            PATCH=0
          elif [ "$RELEASE_TYPE" = "patch" ]; then
            PATCH=$((PATCH+1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Next version: $NEW_VERSION"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Show next version
        run: |
          echo "ðŸš€ The next version: ${{ steps.calculate_version.outputs.new_version }}"
